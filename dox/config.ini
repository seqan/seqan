# Configuration values in the DEFAULT section are available everywhere
# through %(name).
[DEFAULT]
red = #de5b5b
orange = #debd5b
lgreen = #9dde5b
rgreen = #5bde7c
lblue = #5bdede
rblue = #5b7cde
purple = #9d5bde
pink = #de5bbd

[colors]
red = %(red)s
orange = %(orange)s
lgreen = %(lgreen)s
rgreen = %(rgreen)s
lblue = %(lblue)s
rblue = %(rblue)s
purple = %(purple)s
pink = %(pink)s

[entity/typedef]
name = Typedef
ideogram = typedef
color = %(rgreen)s
description = C++ typedefs create type aliases, e.g. alias complex template instantiations to a simple name.
#belongsTo = 

[entity/grouped_typedef]
name = Grouped Typedef
ideogram = typedef
color = %(rgreen)s
description = Typedef in a semantic group.
belongsTo = typedef

[entity/global_typedef]
name = Global Typedef
ideogram = typedef
color = %(rgreen)s
description = Global typedef
belongsTo = typedef

[entity/member_typedef]
name = Member Typedef
ideogram = class { typedef }
color = %(rgreen)s
description = Typedef within a class/struct.
belongsTo = typedef

[entity/concept]
name = Concept
ideogram = Concept
# TODO(holtgrew): Was: darken(colors.red, 20)
color = %(red)s
description = Informal <b>interface</b> for types.
#belongsTo = 

[entity/class]
name = Class
ideogram = Class
color = %(red)s
description = C++ data structure with both data and functions

[entity/specialization]
name = Specialization
ideogram = Spec
color = %(red)s
description = Specialization or subclass of a class.
belongsTo = class

[entity/enum]
name = Enum
ideogram = enum
# TODO(holtgrew): Was: darken(colors.red, 20)
color = %(red)s
description = User-defined C++ type for a fixed number of values, each having a name.
#belongsTo = 

[entity/metafunction]
name = Metafunction
ideogram = Fn<>
color = %(rblue)s
description = Compile-time evaluated function that returns a type as a function of types or compile-time constants.  In C++, implemented as class templates.
#belongsTo = 

[entity/global_metafunction]
name = Global Metafunction
ideogram = Fn<>
color = %(rblue)s
description = Global compile-time evaluated function that returns a type as a function of types or compile-time constants.  In C++, implemented as class templates.
belongsTo = metafunction

[entity/interface_metafunction]
name = Interface Metafunction
ideogram = #Fn<>
color = %(rblue)s
description = A metafunction that is part of a type's global interface.
belongsTo = metafunction

[entity/function]
name = Function
ideogram = fn()
color = %(lblue)s
description = C++ function
#belongsTo = 

[entity/global_function]
name = Global Function
ideogram = fn()
color = %(lblue)s
description = Global C++ function
belongsTo = function

[entity/interface_function]
name = Interface Function
ideogram = #fn()
color = %(lblue)s
description = Global C++ function
belongsTo = function

[entity/member_function]
name = Member Function
ideogram = .fn()
color = %(lblue)s
description = A class' or struct's member function.
belongsTo = function

[entity/tag]
name = Tag
ideogram = Tag
color = %(purple)s
description = Class that is only used for its type (e.g. in <b>tag dispatching</b>).
#belongsTo =

[entity/grouped_tag]
name = Grouped Tag
ideogram = Tag
color = %(purple)s
description = Tag that belongs to a semantic group.
belongsTo = tag

[entity/variable]
name = Variable
ideogram = int x
color = %(lgreen)s
description = Variable
#belongsTo =

[entity/global_variable]
name = Global Variable
ideogram = int x
color = %(lgreen)s
description = Global variable.
belongsTo = variable

[entity/member_variable]
name = Member Variable
ideogram = .x
color = %(lgreen)s
description = Member variable of a class or struct.
belongsTo = variable

[entity/adaption]
name = Adaption
ideogram = foreign::
# TODO(holtgrew): Was darken(window.colors.orange, 10)
color = %(orange)s
#belongsTo =

[entity/macro]
name = Macro
ideogram = #define
# TODO(holtgrew): Was darken(window.colors.orange, -10_)
color = %(orange)s
#belongsTo =

[entity/group]
name = Group
ideogram = Group
# TODO(holtgrew): Was darken(window.colors.pink, 10)
color = %(pink)s
description = Set of functions and/or tags that belong together.
#belongsTo =

[entity/page]
name = Page
ideogram = Page
description = A documentation page without direct correspondance to a code entry.
# TODO(holtgrew): Was darken(window.colors.pink, 10)
color = %(pink)s
#belongsTo =

[entity/template_parameter]
name = Template Parameter
ideogram = <>
color = #999
description = Templates can take types or constant integral values as parameters.
#belongsTo =

[entity/tutorial]
name = Tutorial
ideogram = Tutorial
color = #000
description = Tutorials provide you with a step-by-step manual that helps you to achieve a certain goal. 
#belongsTo =

[entity/unknown]
name = Unknown Language Entity
ideogram = UNKNOWN
color = #f00
description = This is an unknown language entity.
#belongsTo =